version: '3.8'

services:
  mysql:
    build:
      context: .
      dockerfile: docker/db/mysql/Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      # [수정] MYSQL_PORT는 local에서 접속하는 PORT를 지정
      - "${MYSQL_PORT}:3306"
    environment:
      TZ: Asia/Seoul
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE:  "${MYSQL_DATABASE}"
      # travis CI는 test용db를 만들 때 유저명이 travis를 쓴다.
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    volumes:
      # 1. my.cnf 설정파일 host(cnf파일 미리작성) -> docker (*.cnf파일을 읽게됨)
      - ./docker/db/mysql/config:/etc/mysql/conf.d
      # 2. host (자동실행될 스크립트들) -> docker
      - ./docker/db/mysql/init:/docker-entrypoint-initdb.d
      # 3. docker 생성 data들을 공유받게 됨  host <- docker (생성)
      - ./docker/db/mysql/data:/var/lib/mysql
      - ./docker/db/mysql/logs:/var/log/mysql
#    command:
#      >
#      bash -c "chmod 755 /etc/mysql/conf.d/*.cnf && /entrypoint.sh mysqld"
    entrypoint:
      - docker-entrypoint.sh
      - mysqld
  api:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    restart: always
    env_file:
      - .env
    #environment:
    volumes:
      - .:/app
#      "uvicorn",
#      "app.main:app",
# 앱실행은 고정적으로 Dockerfile ENTRYPOINT ["uvicorn", "app.main:app"]로 하고, compose에선 host와 port만 지정한다.
# port는 도커내에선 8000으로 고정하고, ports를 통해 config의 포트와 매핑한다.
    command: [
      "--host=0.0.0.0",
      "--port=8000",
      "--reload"
    ]
    ports:
      - "${PORT}:8000"
#      - "8010:8000"
    # mysql 서비스 도커를 이용하기 위함.
    links:
      - mysql
    depends_on:
      - mysql